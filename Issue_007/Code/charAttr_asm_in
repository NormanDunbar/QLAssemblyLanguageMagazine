; All these functions require a character code in D0.B and will
; return D0 = 0 if the character is invalid, otherwise, D0.B will be 
; a relatively random non-zer0 value.
;
; ENTRY Registers:
;   D0.B Character code to be tested
;
; EXIT Registers:
;   D0.B Zero - Character test failed. (Z flag set)
;        non-zero - Character test passed.

    in characters_asm_in
    

; Given a character code in D0.B, extract the character attributes mask 
; from chartab to D0.B.
; Mask the attributes with the desired mask to get the validation result.
; Return the result in D0.B with Z set to show that the test FAILED.

; On the stack we have D1.W.
; D1.B = required mask
; D0.B = character code
isanything move.l a2,-(a7)              ; Save the worker
           ext.w d0                     ; We need this to be word wide
           move.b (a2,d0.w),d0          ; Character attributes
           and.b d1,d0                  ; Do attributes match?
           move.l (a7)+,a2              ; Restore worker
           move.w (a7)+,d1              ; Restore the other worker
           tst.w d0                     ; Z = not numeric
           rts


; These just set up the mask we want in D1.W, and jump off to the
; common code above. The unstacking of D1.W and return to caller
; is done above.
isdigit    move.w d1,-(a7)              ; Save the first worker
           move.w #DIGIT,d1             ; Required attribute mask
           bra.s isanything             ; Never return here!

isalpha    move.w d1,-(a7)              ; Save the first worker
           move.w #ALPHABETIC,d1        ; Required attribute mask
           bra.s isanything             ; Never return here!

isalnum    move.w d1,-(a7)              ; Save the first worker
           move.w #ALPHANUMERIC,d1      ; Required attribute mask
           bra.s isanything             ; Never return here!

isupper    move.w d1,-(a7)              ; Save the first worker
           move.w #UPPERCASE,d1         ; Required attribute mask
           bra.s isanything             ; Never return here!

islower    move.w d1,-(a7)              ; Save the first worker
           move.w #LOWERCASE,d1         ; Required attribute mask
           bra.s isanything             ; Never return here!

isxdigit   move.w d1,-(a7)              ; Save the first worker
           move.w #HEXDIGIT,d1          ; Required attribute mask
           bra.s isanything             ; Never return here!

ispunct    move.w d1,-(a7)              ; Save the first worker
           move.w #PUNCTUATION,d1       ; Required attribute mask
           bra.s isanything             ; Never return here!

iscntrl    move.w d1,-(a7)              ; Save the first worker
           move.w #CONTROL,d1           ; Required attribute mask
           bra.s isanything             ; Never return here!

isgraph    move.w d1,-(a7)              ; Save the first worker
           move.w #GRAPHIC,d1           ; Required attribute mask
           bra.s isanything             ; Never return here!

isprint    move.w d1,-(a7)              ; Save the first worker
           move.w #PRINTABLE,d1         ; Required attribute mask
           bra.s isanything             ; Never return here!

isspace    move.w d1,-(a7)              ; Save the first worker
           move.w #SPACE,d1             ; Required attribute mask
           bra.s isanything             ; Never return here!

isblank    move.w d1,-(a7)              ; Save the first worker
           move.w #BLANK,d1             ; Required attribute mask
           bra.s isanything             ; Never return here!

