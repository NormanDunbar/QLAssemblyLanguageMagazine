;--------------------------------------------------------------------
; QL2UTF8:
;
; This filter converts QL text files to UTF8 for use on Linux, Mac or
; Windows where most modern editors etc, default to UTF8.
;
;
; EX ql2utf8_bin, input_file, output_file_or_channel
;
;--------------------------------------------------------------------
; 26/09/2019 NDunbar Created for QDOSMSQ Assembly Mailing List
;--------------------------------------------------------------------
; (c) Norman Dunbar, 2019. Permission granted for unlimited use
; or abuse, without attribution being required. Just enjoy!
;--------------------------------------------------------------------

; How many channels do I want?
numchans    equ     2       ; How many channels required?


; Stack stuff.
sourceId    equ     $02     ; Offset(A7) to input file id
destId      equ     $06     ; Offset(A7) to output file id

; Other Variables
pound       equ     96      ; UK Pound sign.
copyright   equ     127     ; (c) sign.
grave       equ     159     ; Backtick/Grave accent.
euro        equ     181     ; Euro symbol
err_bp      equ     -15
err_eof     equ     -10
me          equ     -1
timeout     equ     -1




;====================================================================
; Here begins the code.
;--------------------------------------------------------------------
; Stack on entry:
;
; $06(a7) = Output file channel id.
; $02(a7) = Source file channel id.
; $00(a7) = How many channels? Should be $02.
;====================================================================
start       bra.s   checkStack

            dc.l    $00
            dc.w    $4afb
name        dc.w    name_end-name-2
            dc.b    'QL2UTF8'
name_end    equ     *

version     dc.w    vers_end-version-2
            dc.b    'Version 1.00'
vers_end    equ     *


bad_parameter
    moveq   #err_bp,d0      ; Guess!
    bra     errorExit       ; Die horribly


;--------------------------------------------------------------------
; Check the stack on entry. We only require NUMCHAN channels - any
; thing other than NUMCHANS will result in a BAD PARAMETER error on
; exit from EW (but not from EX).
;--------------------------------------------------------------------
checkStack
    cmpi.w  #numchans,(a7)  ; Two channels is a must
    bne.s   bad_parameter   ; Oops

;--------------------------------------------------------------------
; Initialise a couple of registers that will keep their values all
; through the rest of the code.
;--------------------------------------------------------------------
ql2utf8
    lea     utf8,a2         ; Preserved throughout
    moveq   #timeout,d3     ; Timeout, also Preserved

;--------------------------------------------------------------------
; The main loop starts here. Read a single byte, check for EOF etc.
;--------------------------------------------------------------------
readLoop
    moveq   #io_fbyte,d0    ; Fetch one byte
    move.l  sourceID(a7),a0  ; Channel to readLoop
    trap    #3              ; Do input
    tst.l   d0              ; OK?
    beq.s   testBit7        ; Yes
    cmpi.l  #ERR_EOF,d0     ; All done?
    beq     allDone         ; Yes.
    bra     errorExit       ; Oops!

testBit7
    btst    #7,d1           ; Bit 7 set?
    bne.s   twoBytes        ; Multi Byte character if so

;--------------------------------------------------------------------
; The UK Pound and copyright signs are exceptions to the "bytes 
; less than $80 are the same in UTF8 as they are in ASCII" rule as 
; Sir Clive didn't follow ASCII 100%. Both characters are multi-byte
; in UTF8.
;--------------------------------------------------------------------
testPound
    btst    #7,d1           ; Potential multi-byte character? 
    bne.s   twoBytes        ; Yes
    cmpi.b  #pound,d1       ; Got a UK Pound sign?
    bne.s   testCopyright   ; No.

gotPound
    move.b  #$c2,d1         ; Pound is $C2A3 in UTF8.
    bsr.s   writeByte       ; Write first byte
    move.b  #$a3,d1
    bsr.s   writeByte       ; Write second byte
    bra.s   readLoop

;--------------------------------------------------------------------
; Here we repeat the same check as above, in case we have the
; copyright sign.
;--------------------------------------------------------------------
testCopyright
    cmpi.b  #copyright,d1   ; Got a copyright sign?
    bne.s   oneByte         ; No.

gotCopyright
    move.b  #$c2,d1         ; Copyright is $C2A9 in UTF8.
    bsr.s   writeByte       ; Write first byte
    move.b  #$a9,d1
    bsr.s   writeByte       ; Write second byte
    bra.s   readLoop

;--------------------------------------------------------------------
; All other ASCII characters, below $80, are single byte in UTF8 and
; are the same code as in ASCII.
;--------------------------------------------------------------------
oneByte     
    bsr.s   writeByte       ; Single byte required in UTF8
    bra.s   readLoop

;--------------------------------------------------------------------
; A small but perfectly formed subroutine to send the byte in D1 to
; the output channel.
; BEWARE: This is called with an extra 4 bytes on the stack!
;--------------------------------------------------------------------
writeByte
    moveq   #io_sbyte,d0    ; Send one byte
    move.l  4+destId(a7),a0  ; Output channel id
    trap    #3
    tst.l   d0              ; OK?
    bne.s   errorExit       ; Oops!
    rts

;--------------------------------------------------------------------
; ASCII codes from $80 upwards require multiple bytes in UTF8. In the
; case of the QL, these are mostly 2 bytes long. I could use IO_SSTRG
; here, I know. 
; However, as ever, there are exceptions. The grave accent (backtick)
; is a single byte on output, while the 4 arrow keys are three bytes.
; The bytes to be sent are read from a table because, again, the QL
; is not using the full set of accented characters - so there is
; mucking about to be done.
;--------------------------------------------------------------------
twoBytes
    cmpi.b  #grave,d1       ; Backtick/Grave accent?
    bne.s   testEuro        ; No.

;--------------------------------------------------------------------
; We are dealing with a backtick character (aka Grave accent)?
;--------------------------------------------------------------------
gotGrave
    move.b  #pound,d1       ; Grave in = pound out!
    bsr.s   writeByte       ; Single byte required
    bra     readLoop        ; Do the rest

;--------------------------------------------------------------------
; Here we repeat the same check as above, in case we have the
; Euro sign.
;--------------------------------------------------------------------
testEuro
    cmpi.b  #euro,d1        ; Got a Euro sign?
    bne.s   testArrows      ; No.

gotEuro
    move.b  #$e2,d1         ; Euro is $E282AC in UTF8.
    bsr.s   writeByte       ; Write first byte
    move.b  #$82,d1
    bsr.s   writeByte       ; Write second byte
    move.b  #$ac,d1
    bsr.s   writeByte       ; Write third byte
    bra.s   readLoop

;--------------------------------------------------------------------
; The arrows are $BC, $BD, $BE and $BF (left, right, up, down). These
; are three bytes in UTF8, $E2 $86 $9x where 'x' is 0, 2, 1 or 3.
;--------------------------------------------------------------------
testArrows
    move.b  d1,d2           ; Copy character code
    subi.b  #$bc,d2         ; Anything lower = C set
    bcs.s   notArrows       ; And is not an arrow
    subi.b  #4,d2           ; Arrows = 0-3. C clear is bad
    bcc.s   notArrows       ; Still not an arrow.

gotArrows
    subi.b  #$bc,d1         ; D1 = 0 to 3 
    lea     arrows,a3       ; Arrow table
    move.b  d1,d2           ; Save index into table
    ext.w   d2              ; Need word not byte

    move.b  #$e2,d1         ; First byte
    bsr.s   writeByte
    move.b  #$86,d1         ; Second byte
    bsr.s   writeByte
    move.b  0(a3,d2.w),d1   ; Third byte
    bsr.s   writeByte     
    bra     readLoop        ; Go around again.

;--------------------------------------------------------------------
; We need this as arrows in the QL are Left, Right, Up, Down but in
; UTF8 they are Left, Up, Right, Down. Sigh.
;--------------------------------------------------------------------
arrows
    dc.b    $90,$92,$91,$93  ; Awkward byte order!

;--------------------------------------------------------------------
; Now we are certain, everything is two bytes. Read them from the
; table and write them out.
;--------------------------------------------------------------------
notArrows
    move.b  d1,d2           ; D2 = byte just read
    subi.b  #$80,d2         ; Adjust for table index
    ext.w   d2              ; Word size needed
    lsl.w   #1,d2           ; Double D2 for Offset
    move.b  0(a2,d2.w),d1   ; First byte
    bsr.s   writeByte       ; Send it output
    addq.b  #1,d2
    move.b  0(a2,d2.w),d1   ; Second byte
    bsr.s   writeByte       ; Send it out too
    bra     readLoop        ; Go around.


;--------------------------------------------------------------------
; No errors, exit quietly back to SuperBASIC.
;--------------------------------------------------------------------
allDone
    moveq   #0,d0

;--------------------------------------------------------------------
; We have hit an error so we copy the code to D3 then exit via a
; forcible removal of this job. EXEC_W/EW will display the error in
; SuperBASIC, but EXEC/EX will not.
;--------------------------------------------------------------------
errorExit
    move.l  d0,d3           ; Error code we want to return

;--------------------------------------------------------------------
; Kill myself when an error was detected, or at EOF.
;--------------------------------------------------------------------
suicide
    moveq   #mt_frjob,d0    ; This job will die soon
    moveq   #me,d1
    trap    #1

;--------------------------------------------------------------------
; The following table contains the two byte sequences required for 
; QL characters above $80. These are all 2 bytes in UTF8, so quite a 
; simple case. (Not when converting UTF8 to QL though!)
;--------------------------------------------------------------------
utf8
    dc.w    $c3a4           ; a umlaut
    dc.w    $c3a3           ; a tilde
    dc.w    $c3a2           ; a circumflex
    dc.w    $c3a9           ; e acute
    dc.w    $c3b6           ; o umlaut
    dc.w    $c3b5           ; o tilde
    dc.w    $c3b8           ; o slash
    dc.w    $c3bc           ; u umlaut
    dc.w    $c3a7           ; c cedilla
    dc.w    $c3b1           ; n tilde
    dc.w    $c3a6           ; ae ligature
    dc.w    $c593           ; oe ligature
    dc.w    $c3a1           ; a acute
    dc.w    $c3a0           ; a grave
    dc.w    $c3a2           ; a circumflex
    dc.w    $c3ab           ; e umlaut
    dc.w    $c3a8           ; e grave
    dc.w    $c3aa           ; e circumflex
    dc.w    $c3af           ; i umlaut
    dc.w    $c3ad           ; i acute
    dc.w    $c3ac           ; i grave
    dc.w    $c3ae           ; i circumflex
    dc.w    $c3b3           ; o acute
    dc.w    $c3b2           ; o grave
    dc.w    $c3b4           ; o circumflex
    dc.w    $c3ba           ; u acute
    dc.w    $c3b9           ; u grave
    dc.w    $c3bb           ; u circumflex
    dc.w    $ceb2           ; B as in ss (German)
    dc.w    $c2a2           ; Cent
    dc.w    $c2a5           ; Yen
    dc.w    $0000           ; Grave accent - single byte
    dc.w    $c384           ; A umlaut
    dc.w    $c383           ; A tilde
    dc.w    $c385           ; A circle
    dc.w    $c389           ; E acute
    dc.w    $c396           ; O umlaut
    dc.w    $c395           ; O tilde
    dc.w    $c398           ; O slash
    dc.w    $c39c           ; U umlaut
    dc.w    $c387           ; C cedilla
    dc.w    $c391           ; N tilde
    dc.w    $c386           ; AE ligature
    dc.w    $c592           ; OE ligature
    dc.w    $ceb1           ; alpha
    dc.w    $ceb4           ; delta
    dc.w    $ceb8           ; theta
    dc.w    $cebb           ; lambda
    dc.w    $c2b5           ; micro (mu?)
    dc.w    $cf80           ; PI
    dc.w    $cf95           ; o pipe
    dc.w    $c2a1           ; ! upside down
    dc.w    $c2bf           ; ? upside down
    dc.w    $0000           ; Euro
    dc.w    $c2a7           ; Section mark
    dc.w    $c2a4           ; Currency symbol
    dc.w    $c2ab           ; <<
    dc.w    $c2bb           ; >>
    dc.w    $c2ba           ; Degree
    dc.w    $c3b7           ; Divide
