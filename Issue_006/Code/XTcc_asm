;--------------------------------------------------------------------
; XTcc:
;
; This utility reads a cross-compiled executable for QDOSMSQ and will
; attempt to correctly set the file's data space according to the
; 'XTcc' setting stored at the end of the file.
;
;
; EX XTcc_bin, input_file
;
;--------------------------------------------------------------------
; 13/12/2018 NDunbar Created for QDOSMSQ Assembly Mailing List
;--------------------------------------------------------------------
; (c) Norman Dunbar, 2018. Permission granted for unlimited use
; or abuse, without attribution being required. Just enjoy!
;--------------------------------------------------------------------

; How many channels do I want?
NUMCHANS
           equ     1                   ; How many channels required?


; Stack stuff.
sourceId
           equ     $02                 ; Offset(A7) to input file id

; Other stuff.
err_nc
           equ     -1                  ; Not complete.
err_or
           equ     -4                  ; Out of range.
err_nf
           equ     -7                  ; Not found.
err_bp
           equ     -15                 ; Bad parameter.
err_fe
           equ     -16                 ; File error.
timeout
           equ     -1                  ; Trap call timeouts.
me
           equ     -1                  ; Job id for this job.
exeType
           equ     $01                 ; File Type for executable.
fileType
           equ     $05                 ; Offset in header to file type.
fileSize
           equ     $00                 ; Offset to file length.
fileData
           equ     $06                 ; Offset to dataspace in header
dataSpace
           equ     $04                 ; Offset to XTcc datspace value



;====================================================================
; Here begins the code.
;--------------------------------------------------------------------
; Stack on entry:
;
; $0c(a7) = bytes of parameter + padding, if odd length.
; $0a(a7) = Parameter size word.
; $06(a7) = Output file channel id.
; $02(a7) = Source file channel id.
; $00(a7) = How many channels? Should be $02.
;====================================================================
start
           bra.s   checkStack

           dc.l    $00
           dc.w    $4afb
name
           dc.w    name_end-name-2
           dc.b    'XTcc'
name_end
           equ     *

version
           dc.w    vers_end-version-2
           dc.b    'Version 1.00 - 13/Dec/2018'
vers_end
           equ     *


bad_parameter
           moveq   #err_bp,d0          ; Guess!
           bra     errorExit           ; Die horribly

rh_buffer
           ds.w    32                  ; Storage for file header
xtcc_buffer
           ds.l    2                   ; Storage for XTcc flag * dataspace


;--------------------------------------------------------------------
; Check the stack on entry. We only require NUMCHAN channels - any
; thing other than NUMCHANS will result in a BAD PARAMETER error on
; exit from EW (but sadly, not from EX).
;--------------------------------------------------------------------
checkStack
           cmpi.w  #NUMCHANS,(a7)      ; Two channels is a must
           bne.s   bad_parameter       ; Oops

;--------------------------------------------------------------------
; READ_HEADER = read the file header for the given channel.
;
; A0.L = Channel Id.        (Preserved)
; A1.L = Buffer address.    (1 past end of buffer on return)
; D1   = Not used.          (Size of buffer read)
; D2.W = Buffer length.     (Preserved)
; D3.W = Timeout.           (Preserved)
;--------------------------------------------------------------------
readHeader
           moveq   #fs_headr,d0        ; Reading the header
           moveq   #64,d2              ; Buffer maximum size
           moveq   #timeout,d3         ; Infinity is preserved throughout
           move.l  sourceId(a7),a0     ; Input channel ID - preserved
           lea     rh_buffer,a1        ; Header buffer address
           move.l  a1,a3               ; Preserve buffer address
           move.w  #64,d2              ; Buffer maximum length
           trap    #3                  ; Do it
           tst.l   d0                  ; Check errors
           bne     errorExit           ; Oh dear!
           cmp.w   d1,d2               ; Successful read?
           beq.s   checkExecutableType ; Yes
           moveq   #err_nc,d0          ; Not Complete
           bra     errorExit           ; Depart


;--------------------------------------------------------------------
; Check if the file is already executable. If so, quietly exit as we
; have nothing to do. Cross compiled files do not come set to be
; executable.
;--------------------------------------------------------------------
checkExecutableType
           cmpi.b  #exeType,fileType(a3)  ; Buffer start is in a3 now
           beq     allDone             ; Executable - nothing to do


;--------------------------------------------------------------------
; In a cross compiled file, there is a pair of long words at the very
; end of the file. These are 'XTcc' followed by the data space for
; QDOSMSQ.
;--------------------------------------------------------------------
; FS_POSAB:
;
; A0.L = Channel Id.        (Preserved)
; A1.L = Not used.          (Corrupted!)
; D1.L = File position.     (New file position on return)
; D3.W = Timeout.           (Preserved)
;--------------------------------------------------------------------
setFileToXTcc
           moveq   #fs_posab,d0        ; Position absolutely
           move.l  fileSize(a3),d1     ; Get file size
           subq.l  #8,d1               ; Point at XTcc location in file
           move.l  d1,d2               ; Save required position
           trap    #3                  ; Do it
           tst.l   d0                  ; Ok?
           bne     errorExit           ; Oops!
           cmp.l   d1,d2               ; Actual = requested position?
           beq.s   readXTccData        ; Yes
           moveq   #err_or,d0          ; Out of range
           bra     errorExit           ; Bale out

;--------------------------------------------------------------------
; Read the final 2 words from the input file.
;--------------------------------------------------------------------
; IO_FSTRG:
;
; A0.L = Channel Id.        (Preserved)
; A1.L = Buffer address.    (Old A1 + returned D1.W)
; D1.L = Not Used.          (Number of bytes read)
; D2.W = Buffer size.       (Preserved)
; D3.W = Timeout.           (Preserved)
;--------------------------------------------------------------------
readXTccData
           moveq   #io_fstrg,d0        ; Fetch bytes
           moveq   #8,d2               ; Bytes we want
           lea     xtcc_buffer,a1      ; Buffer address
           move.l  a1,a2               ; Save buffer address
           trap    #3                  ; Do it
           tst.l   d0
           bne     errorExit           ; Oops!
           cmp.w   d2,d1               ; Did we get 8 bytes?
           beq.s   checkXTccFound      ; Yes
           moveq   #err_fe,d0          ; -16 bad or changed medium
           bra     errorExit           ; Bale out

;--------------------------------------------------------------------
; We should have 'XTcc' in the buffer plus the dataspace required.
;--------------------------------------------------------------------
checkXTccFound
           cmpi.l  #"XTcc",(a2)        ; Got the flag?
           bne.s   noXTccFound         ; Nope

;--------------------------------------------------------------------
; We have the data we want, copy the dataspace into the file header
; and then make the file executable.
;--------------------------------------------------------------------
extractDataSpace
           move.l  dataSpace(a2),fileData(a3)  ; Copy the value over
           move.b  #exeType,fileType(a3)       ; Make executable
           bra.s   writeHeader         ; Write the header back

;--------------------------------------------------------------------
; We didn't find the "XTcc" flag at the end of the file.
;--------------------------------------------------------------------
noXTccFound
           moveq   #err_nf,d0          ; Not found
           bra.s   errorExit           ; Bale out


;--------------------------------------------------------------------
; Write the file header for the given channel.
;
; A0.L = Channel Id.        (Preserved)
; A1.L = Buffer address.    (Corrupted)
; D1   = Not used.          (Length of set header)
; D2   = Not used.          (Preserved)
; D3.W = Timeout.           (Preserved)
;--------------------------------------------------------------------
writeHeader
           moveq   #fs_heads,d0        ; Write the header
           move.l  a3,a1               ; Header buffer
           trap    #3                  ; Do it
           tst.l   d0                  ; Ok?
           bne.s   errorExit           ; Sadly, not!


;--------------------------------------------------------------------
; No errors, exit quietly back to SuperBASIC.
;--------------------------------------------------------------------
allDone
           moveq   #0,d0

;--------------------------------------------------------------------
; We have hit an error so we copy the code to D3 then exit via a
; forcible removal of this job. EXEC_W/EW will display the error in
; SuperBASIC, but EXEC/EX will not.
;--------------------------------------------------------------------
errorExit
           move.l  d0,d3               ; Error code we want to return

;--------------------------------------------------------------------
; Kill myself when an error was detected, or at EOF.
;--------------------------------------------------------------------
suicide
           moveq   #mt_frjob,d0        ; This job will die soon
           moveq   #me,d1
           trap    #1

