Changes for this issue and onwards:

1. Use SMSQ/E trap names etc. Do we need a header file or
   just use the ones we need? Note that the SMSQ names use
   a dot, not an underscore. Do we need both?

2. Beginner's Guide to SMSQ/E traps/vectors etc.

3. QMAC/QLINK/QMAKE tutorial.

4. Assembler Workbench ditto?

5. GWASL/GWASS ditto?

6. Parser/Compiler? (See number 7!)

7. Utility to convert equates and such like from QDOS to SMSQ 
   which should replace explicit equates, insert missing ones,
   where the QDOS ones are automatic (GWASL/GWASS). Look for:

    QDOS_NAME equ $00
    ...
    moveq[.L] #QDOS_NAME,D0
    move[.Size] #QDOS_NAME,D0
    ...
    move.w QDOS_NAME,An

    Lookup table? Maybe, maybe not.

    dc.w Length of each entry
    dc.b 'ENTRY_0','ENTRY_1',...

    Have separate tables for different lengths.

    extract label, get length, use that table, find entry,
    then what? How to replace it?

    If SMSQ name is smaller than QDOS name, add spaces,
    If larger, remove spaces? [OPTIONAL]


ALTERNATIVELY:


Can I do this?
In Assembly Language?


Example:

With (a,b,c) : (a * b + (c * 2)) ;

Should:

* Create a job to:
* Open a window
* Prompt for values for A, B and C
* Run the calculation
* Print the results
* Pause for a keypress
* Die.


Lexer Rules

Tid     : [A-Za-z][A-Za-z_]* ;
Tnumber : [0-9]+    ;   // Negatives?
Twith   : "WITH"    ;
Tcolon  : ":"       ;
Tsemi   : ";"       ;
Tleft   : "("       ;
Tright  : ")"       ;
Tmult   : "*"       ;
Tdiv    : "/"       ;
Tplus   : "+"       ;
Tminus  : "-"       ;
Tcomma  : ","       ;


Parser Rules

pCalc   : pDefn Tcolon pExpr Tsemi       ;
pDefn   : Twith Tleft pVarList Tright    ;
pVarList: Tid (Tcomma Tid)*              ;
pExpr   : pTerm (Tplus | tMinus) pTerm   ;
pExpr   : pFactor (Tmult | Tdiv) pFactor ;
pFactor : Tleft pExpr Tright 
        | Tnumber
        | pVar                           ;


AST

            root
     varList     expression


Code Generated

Boilerplate.
    job header
    Open channel
    attributes
    pause
    keypress
    die
    Prompts
    Get input

Storage for result 32 bits:
    vResult ds.l 1

For each var:
    "var_"name ds.w 1      ; 16 bits available

    Enter value for 'name':
    Accept value
    Write to "var_"name's storage.
end for

calculate

    For each operation in expr tree
        Clear D5?
        Read operation
        Load left to D7
        Load right to D6
        Perform operation
        Save pending result in D5?
    End for

        Save D5 in result.
        Print result.



