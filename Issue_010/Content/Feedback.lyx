#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass scrbook
\begin_preamble
% Required for the setup of the listings.
\usepackage{xcolor}
\definecolor{ocre}{RGB}{243,102,25}
\definecolor{wwwDarkGreen}{HTML}{006400}
\definecolor{wwwDarkOrchid}{HTML}{9932CC}
\definecolor{wwwDarkOrange}{HTML}{FF8C00}

% To allow tabl;es to be coloured in the background, 
% not just the text.
\usepackage{colortbl}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language british
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize 11
\spacing single
\use_hyperref true
\pdf_title "PlatformIO for the Arduino User"
\pdf_author "Norman Dunbar"
\pdf_subject "PlatformIO"
\pdf_keywords "PlatformIO Arduino AVR ATMEGA ATMEGA328"
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder true
\pdf_colorlinks true
\pdf_backref false
\pdf_pdfusetitle true
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification false
\use_refstyle 1
\use_minted 0
\boxbgcolor #ff557f
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip medskip
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 2
\paperpagestyle default
\listings_params "backgroundcolor={\color{ocre!10}},basicstyle={\small},breakatwhitespace=false,breaklines=false,captionpos=b,commentstyle={\color{wwwDarkGreen}},deletekeywords={...},escapeinside={\%*}{*)},extendedchars=true,frame=leftline,framerule=4pt,keepspaces=true,keywordstyle={\color{blue}},morekeywords={*,...},numbers=left,numbersep=10pt,numberstyle={\color{ocre}},rulecolor={\color{ocre}},showspaces=false,showstringspaces=false,showtabs=false,stepnumber=1,stringstyle={\color{wwwDarkOrange}},tabsize=2,title={\lstname},breaklines=true,postbreak={\mbox{\textcolor{ocre}{\textbf{$\Longrightarrow$}}\space}},language={[Motorola68k]Assembler}"
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter
Feedback
\end_layout

\begin_layout Section
Circular Buffers
\end_layout

\begin_layout Standard
When I announce Issue 9 on the QL Forum, Marcel queried the Circular Buffer
 article in the issue.
 He was wondering if I had simply recreated the Queue handling features
 of QDOSMSQ, those being 
\family typewriter
IOQ.SETQ
\family default
, 
\family typewriter
IOQ.TEST
\family default
, 
\family typewriter
IOQ.PBYT
\family default
, and 
\family typewriter
IOQ.GBYT
\family default
.
 
\end_layout

\begin_layout Standard
Putting it simply, 
\emph on
probably
\emph default
! However, as I pointed out, it was a fun exercise in creating the code
 from a C++ version, and debugging a particularly insidious bug where allocating
 common heap space gets rounded up!
\end_layout

\begin_layout Standard
Thanks Marcel, at least I know one person read it!
\end_layout

\begin_layout Section
Learning Assembly Language
\end_layout

\begin_layout Standard

\emph on
TMD2003
\emph default
 wondered about learning Assembly Language and started 
\begin_inset CommandInset href
LatexCommand href
name "a thread"
target "https://qlforum.co.uk/viewtopic.php?f=3&t=3976"
literal "false"

\end_inset


\begin_inset Foot
status collapsed

\begin_layout Plain Layout
https://qlforum.co.uk/viewtopic.php?f=3&t=3976
\end_layout

\end_inset

 on the QL Forum
\begin_inset Foot
status open

\begin_layout Plain Layout
Yes, I know, it's not really feedback on the previous issue of the eMagazine,
 but I thought it was relevant.
\end_layout

\end_inset

.
 On the second page of the thread, 
\emph on
Tinyfpga
\emph default
 issued this statement:
\end_layout

\begin_layout Standard

\emph on
In Basic all I have to do start my journey into the programming world is
 to:- Type into QD
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

OPEN #1,con_ 
\end_layout

\begin_layout Plain Layout

OUTLN #1,310,60,50,300 
\end_layout

\begin_layout Plain Layout

CLS #1 : BORDER #1,1,7 
\end_layout

\begin_layout Plain Layout

INPUT #1,a$
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\emph on
I then save the text in a ram disk, press the execute button and ,"hey presto",
 I see an app on my screen.
 What could be an easier introduction to programming?
\end_layout

\begin_layout Standard
Well, I decided that that would be a good start to the new Beginner's feature,
 so I've taken up 
\emph on
Tinyfpga
\emph default
's 
\begin_inset Quotes eld
\end_inset

challenge
\begin_inset Quotes erd
\end_inset

 in this issue and converted his 
\emph on
easy introduction to programming
\emph default
 into Assembly Language.
\end_layout

\begin_layout Section
Wolfgang's Feedback on Label Alignment
\end_layout

\begin_layout Standard
Wolfgang Lenerz also mentioned a foible he has discovered in the way I format
 my source code for Assembly Language programs and utilities.
 This is quite a weird foible, in my opinion, but never the less it needs
 looking into.
 Here are Wolfgang's comments:
\end_layout

\begin_layout Itemize
I downloaded the QL Assembly Language issue 9.
 As usual, it's fun to read! I have a small comment regarding your label
 emplacements - I hope you don't mind.
 Looking at the ql2win filter programs, it starts like this:
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

start
\end_layout

\begin_layout Plain Layout

    bra.s checkStack
\end_layout

\begin_layout Plain Layout

    dc.l $00
\end_layout

\begin_layout Plain Layout

    dc.w $4afb
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

name
\end_layout

\begin_layout Plain Layout

    dc.w name_end-name-2
\end_layout

\begin_layout Plain Layout

    dc.b 'QL2WIN'
\end_layout

\begin_layout Plain Layout

name_end equ *
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

version
\end_layout

\begin_layout Plain Layout

    dc.w vers_end-version-2
\end_layout

\begin_layout Plain Layout

    dc.b 'Version 1.00'
\end_layout

\begin_layout Plain Layout

vers_end equ *
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

checkStack
\end_layout

\begin_layout Plain Layout

    ...
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Let's suppose I wanted to print out the version, I might start that by using
 the lines:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

    lea version,a1
\end_layout

\begin_layout Plain Layout

    move.w (a1)+,d1
\end_layout

\begin_layout Plain Layout

    ...
\end_layout

\end_inset


\end_layout

\begin_layout Standard
somewhere in the code.
 That would work fine.
\end_layout

\begin_layout Standard
Now make the program name any number of odd characters, like 'QL2WINa' and
 leave the rest as is.
 One would think that this shouldn't make any difference.
\end_layout

\begin_layout Standard
Strangely enough though, when you run this, the line 
\begin_inset listings
lstparams "showstringspaces=false"
inline true
status open

\begin_layout Plain Layout

lea version,a1
\end_layout

\end_inset

 will give you an address error
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Admittedly, you won't have a problem on 
\emph on
QPC
\emph default
 - but that is because 
\emph on
QPC
\emph default
 emulates an 68020, which can handle word and longword reads/writes at odd
 addresses.
 You won't have a problem with 
\emph on
SMSQmulator
\emph default
 either i.e.
 no address error exception, but you will get "unexpected results"...
\end_layout

\end_inset

 as A1 will point to an odd address!
\end_layout

\begin_layout Standard
If you now move the 
\family typewriter
version
\family default
 label to the line 
\family typewriter
dc.w vers_end-version-2
\family default
, everything will be fine again, whether the name length is odd or even.
\end_layout

\begin_layout Standard
So what happens? The assembler (at least the macro assembler, I don't know
 about George's) will go through the file and note the address of the version
 label.
 This comes right after the bytes of the name, and if the name length is
 uneven, that address is also odd.
 Then the assembler continues and notes the 
\family typewriter
DC.W
\family default
 directive.
 As this would lie at an odd address, it inserts a filler byte - which comes
 
\emph on
after
\emph default
 the 
\family typewriter
version
\family default
 label.
\end_layout

\begin_layout Standard
If you now put the label on the same line as the 
\family typewriter
DC.W
\family default
 directive, the assembler puts in the filler byte before noting the address
 of 
\family typewriter
version
\family default
 label.
\end_layout

\begin_layout Standard
This is why there is no problem with leaving labels inside of actual code
 even above the line the label refers to - code is always word aligned.
 But if you start handling bytes, then you might get an odd address at a
 label.
\end_layout

\begin_layout Standard
This is why most people leave more space between the beginning of the line
 and the start of the opcode - it leaves more space for putting the labels
 in front of them.
\end_layout

\end_deeper
\begin_layout Standard
Interesting! I'll answer the last point first, I put labels on a separate
 line because I prefer it that way.
 I was brought up on COBOL where that was required.
 It has sort of stuck.
 I never realised it would cause so much trouble though.
\end_layout

\begin_layout Standard
I decided to run a few tests, using 
\emph on
GWASL
\emph default
, 
\emph on
GWASS
\emph default
 and 
\emph on
QMAC
\emph default
 which are the assemblers I own.
 The source code was as follows:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

;    section code
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

start
\end_layout

\begin_layout Plain Layout

    bra.s checkStack
\end_layout

\begin_layout Plain Layout

    dc.l $00
\end_layout

\begin_layout Plain Layout

    dc.w $4afb
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

name
\end_layout

\begin_layout Plain Layout

    dc.w name_end-name-2
\end_layout

\begin_layout Plain Layout

    dc.b 'QL2WIN'
\end_layout

\begin_layout Plain Layout

name_end equ *
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

version
\end_layout

\begin_layout Plain Layout

    dc.w vers_end-version-2
\end_layout

\begin_layout Plain Layout

    dc.b 'Version 1.00'
\end_layout

\begin_layout Plain Layout

vers_end equ *
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

start2
\end_layout

\begin_layout Plain Layout

    bra.s checkStack
\end_layout

\begin_layout Plain Layout

    dc.l $00
\end_layout

\begin_layout Plain Layout

    dc.w $4afb
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

name2
\end_layout

\begin_layout Plain Layout

    dc.w name_end2-name2-2
\end_layout

\begin_layout Plain Layout

    dc.b 'QL2WIN'
\end_layout

\begin_layout Plain Layout

name_end2 equ *
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

version2
\end_layout

\begin_layout Plain Layout

    dc.w vers_end2-version2-2
\end_layout

\begin_layout Plain Layout

    dc.b 'Version 1.00'
\end_layout

\begin_layout Plain Layout

vers_end2 equ *
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

checkStack
\end_layout

\begin_layout Plain Layout

    moveq #0,d0
\end_layout

\begin_layout Plain Layout

    rts
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

;    end
\end_layout

\end_inset


\end_layout

\begin_layout Standard
I uncommented the 
\family typewriter
section code
\family default
 and 
\family typewriter
end
\family default
 lines to compile with 
\emph on
QMAC
\emph default
.
 The results of my experimenting are shown in table 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:Weird-Label-Addresses"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float table
placement !h
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="11" columns="4">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
GWASL
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
GWASS
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
QMAC
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
start
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
$0000
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
$0000
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
$0000
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
name
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
$0008
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
$0008
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
$0008
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
name_end
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
$000D
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
$000D
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
$000D
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
version
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{red}
\end_layout

\end_inset

$000D
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{red}
\end_layout

\end_inset

$000D
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{red}
\end_layout

\end_inset

$000D
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
vers_end
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
$001C
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
$001C
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
$001C
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
start2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
$001C
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
$001C
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
$001C
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
name2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
$0024
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
$0024
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
$0024
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
name_end2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
$0029
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
$0029
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
$0029
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
version2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
$002A
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
$002A
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
$002A
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
vers_end2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
$0038
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
$0038
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
$0038
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Weird Label Addresses
\begin_inset CommandInset label
LatexCommand label
name "tab:Weird-Label-Addresses"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
The odd addresses, that we care about, are highlighted.
 Just taking a slightly edited extract from the 
\emph on
GWASL
\emph default
/
\emph on
GWASS
\emph default
 listing files, we can see the problem:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

...
\end_layout

\begin_layout Plain Layout

000D 00                        version
\end_layout

\begin_layout Plain Layout

000E 000C                          dc.w vers_end-version-2
\end_layout

\begin_layout Plain Layout

0010 5665 7273 696F 6E20 312E      dc.b 'Version 1.00'
\end_layout

\begin_layout Plain Layout

001C                           vers_end-version-2
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The label 
\family typewriter
version
\family default
, is at address $000D, or 13 in decimal, which is definitely odd.
 A similar output can be seen in the listing file from 
\emph on
QMAC
\emph default
.
\end_layout

\begin_layout Standard
Well, that's a bummer indeed! How to resolve the issue? Simples!
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

start
\end_layout

\begin_layout Plain Layout

    bra.s checkStack
\end_layout

\begin_layout Plain Layout

    dc.l $00
\end_layout

\begin_layout Plain Layout

    dc.w $4afb
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

name
\end_layout

\begin_layout Plain Layout

    dc.w name_end-name-2
\end_layout

\begin_layout Plain Layout

    dc.b 'QL2WIN'
\end_layout

\begin_layout Plain Layout

name_end equ *
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	ds.w 0		; Force word alignment
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

version
\end_layout

\begin_layout Plain Layout

    dc.w vers_end-version-2
\end_layout

\begin_layout Plain Layout

    dc.b 'Version 1.00'
\end_layout

\begin_layout Plain Layout

vers_end equ *
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

...
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

checkStack
\end_layout

\begin_layout Plain Layout

    moveq #0,d0
\end_layout

\begin_layout Plain Layout

    rts
\end_layout

\end_inset


\end_layout

\begin_layout Standard
By adding the line 
\begin_inset listings
lstparams "showstringspaces=false"
inline true
status open

\begin_layout Plain Layout

ds.w 0
\end_layout

\end_inset

 to force word alignment, the problem goes away.
 This is because the alignment byte is inserted 
\emph on
before
\emph default
 the label and not 
\emph on
at
\emph default
 the label as before.
 This extract from the 
\emph on
GWASL
\emph default
/
\emph on
GWASS
\emph default
 listing files shows the fix in place:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

...
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

000E                           version
\end_layout

\begin_layout Plain Layout

000E 000C                          dc.w vers_end-version-2
\end_layout

\begin_layout Plain Layout

0010 5665 7273 696F 6E20 312E      dc.b 'Version 1.00'
\end_layout

\begin_layout Plain Layout

001C                           vers_end-version-2
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The version label is now correctly word aligned and has an even address.
\end_layout

\begin_layout Section
Wolfgang's Comments on 
\family typewriter
Ql2Win_asm
\end_layout

\begin_layout Standard
Wolfgang also sent me a second email, after asking if he could comment on
 my code, with the following comments and observations.
 
\end_layout

\begin_layout Standard
I'm happy for any comments to be sent to me regarding anything I write,
 I'm not an expert and sometimes there are other/better ways to do what
 I do, feel free to point them out!
\end_layout

\begin_layout Itemize
I don't understand the reason for the code at label 
\family typewriter
gotLine
\family default
.
\end_layout

\begin_layout Standard
This may be down to my use of 
\family typewriter
IO_FSTRG
\family default
 which I was using originally, instead of 
\family typewriter
IO_FLINE
\family default
 which I changed it to use instead.
 I think, if I remember, I had a bug or two, or something wasn't quite right
 with 
\family typewriter
IO_FSTRG
\family default
 hence the change.
 I might have forgotten to clean up afterwards!
\end_layout

\begin_layout Itemize
You test for the presence of LF at the end of the string.
 But, in your scheme, it will always be there!Well, only if the line was
 shorter than the buffer length.
 
\end_layout

\begin_layout Standard
Looking at the code (
\family typewriter
ql2win_asm
\family default
) I see that 
\family typewriter
gotLine
\family default
 looks for the linefeed, and if not there, skips to 
\family typewriter
putLine
\family default
 to write out the buffer, before reading the next chunk again by branching
 back to 
\family typewriter
readLoop
\family default
.
\end_layout

\begin_layout Itemize
Indeed, if you get a line that is too long for the buffer, the trap comes
 back with a buffer full error (-5) (or, sometimes, mistakenly, with an
 overflow error, -18) - and in that case you abandon the treatment as you
 leave with the error.
 So the only time you get to the label is when the line does have the correct
 LF at the end - no need to check for it.
\end_layout

\begin_layout Standard
This is 
\emph on
obviously
\emph default
 (now you mention it) a bug.
 You are correct, if the buffer is too small I will get an error, so I'll
 never be able to read the next chunk of the partial line.
 Thanks for pointing this out.
 
\end_layout

\begin_layout Itemize
You should really also treat the 
\family typewriter
bffl
\begin_inset Foot
status open

\begin_layout Plain Layout

\family typewriter
Buffer Overflow
\end_layout

\end_inset


\family default
 error, by just writing the line so far, and then getting the rest of it.
\end_layout

\begin_layout Standard
See above! I thought I was doing this, but the trap handling code breaks
 it.
 Duh!
\end_layout

\begin_layout Itemize
When there is an EOF at the read trap, you leave w/o error.
 What if the last file in the file didn't end with LF or CR/LF? You'll also
 get an EOF, but there will be a remainder still in the buffer.
 Shouldn't the remainder still be written out?
\end_layout

\begin_layout Standard
Yes, another bug that needs fixing.
 Thanks.
\end_layout

\begin_layout Itemize
Consider this code:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

(jump here from start)
\end_layout

\begin_layout Plain Layout

checkStack
\end_layout

\begin_layout Plain Layout

     cmpi.w  #numchans,(a7)    ; Two channels is a must
\end_layout

\begin_layout Plain Layout

     beq.s   ql2win            ; Ok, skip error bit
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

bad_parameter
\end_layout

\begin_layout Plain Layout

     moveq   #err_bp,d0        ; Guess!
\end_layout

\begin_layout Plain Layout

     bra     errorExit         ; Die horribly
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

ql2win
\end_layout

\begin_layout Plain Layout

     moveq   #timeout,d3       ; Timeout
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
After checking for the correct number of channels, you branch to 
\family typewriter
ql2win
\family default
 if that is ok, else you continue and treat the error.
 May I suggest you do the contrary? Check for correct number of channels
 and branch to the error code if there is a problem, else continue normally.
 Something like this:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

bad_parameter
\end_layout

\begin_layout Plain Layout

     moveq   #err_bp,d0        ; Guess!
\end_layout

\begin_layout Plain Layout

     bra     errorExit         ; Die horribly
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

(jump here from start)
\end_layout

\begin_layout Plain Layout

checkStack
\end_layout

\begin_layout Plain Layout

     cmpi.w  #numchans,(a7)    ; Two channels is a must
\end_layout

\begin_layout Plain Layout

     bne.s   bad_parameter     ;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

ql2win
\end_layout

\begin_layout Plain Layout

     moveq   #timeout,d3       ; Timeout
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
The reason is two-fold.
\end_layout

\begin_layout Standard
First of all, a branch not taken is faster than a branch taken.
 So here, you only take the branch if there is a problem with the parameters,
 and in that case you don't really care if that takes a microsecond more.
\end_layout

\begin_layout Standard
Second, you don't interrupt the program flow for whoever is reading your
 program.
 Instead of also having to (mentally) jump to the 
\family typewriter
ql2win
\family default
 label, you just continue reading.
 (Admittedly, this last point is more of a personal preference).
\end_layout

\begin_layout Standard
The same reasoning could also be applied in the 
\family typewriter
readloop
\family default
, after the trap where you test 
\family typewriter
D0
\family default
 for errors - only branch if there is an error, not if there isn't.
\end_layout

\end_deeper
\begin_layout Standard
All of which makes perfect sense, thanks.
 I usually try to consider the most often occurring case first, but occasionally
, I do things in a different order.
 I must try harder.
\end_layout

\begin_layout Itemize
Maybe you should tell your readers that you don't explicitly close the channels
 that were opened, since the OS automatically closes all channels opened
 (or rather owned) by a job when that job is removed.
\end_layout

\begin_layout Standard
A good suggestion, thanks.
 I will.
 In fact, I'll do it now!
\end_layout

\begin_layout Standard
I have omitted to make clear that any open channels, chunks of heap space
 allocated to a specific job, will be reclaimed by the operating system
 when the job is removed from the system, either by itself or forcibly by
 another job.
 This keeps things nice and tidy and is rather helpful, 
\emph on
however
\emph default
, there's no harm whatsoever in closing files yourself and returning allocated
 heap space back to the Common Heap.
\end_layout

\begin_layout Itemize
Finally, I presume that you didn't use the SMSQE queue handling (at smsq_ioq_)
 for didactic reasons for your circular buffer (which is what an SMSQE queue
 is).
\end_layout

\begin_layout Standard
Ah yes, the QDOS/SMSQ/E Queue Handling functions! Marcel mentioned those
 (on the QL Forum) as well.
 I was aware of those, but this is some code I've written in C++ for a project,
 and I will soon (for certain values of soon) be converting it to Atmel
 AVR Assembly Language for a similar project.
 I thought I would try it out on a language I'm more familiar with first.
 It was also a fun project to work with, having been away from the keyboard
 for a while.
\end_layout

\begin_layout Itemize
I know these were a great number of comments, but they wouldn't exist if
 you hadn't taken it upon yourself to write your greatly enjoyable series!
\end_layout

\begin_layout Standard
Comments are 
\emph on
always
\emph default
 welcome, thanks.
 It's good to hear that I have at least two readers! (Not counting myself,
 and also, why do I always find bugs/typos after sending out the eMagazine!)
\end_layout

\begin_layout Standard
Thanks Wolfgang.
\end_layout

\begin_layout Section
Bug Fixes for Ql2Win/Win2ql
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
A file with only 
\begin_inset Quotes eld
\end_inset

Hello World
\begin_inset Quotes erd
\end_inset

 and no LF and no CR and a buffer size of 4+2 words, gets truncated to 8
 bytes (buffer size) because there's no LF for ql2win and no crlf for win2ql.
 NEEDS TO BE FIXED.
\end_layout

\begin_layout Plain Layout
Test file:
\end_layout

\begin_layout Plain Layout
open #3,...
\end_layout

\begin_layout Plain Layout
print #3,
\begin_inset Quotes erd
\end_inset

Hello World
\begin_inset Quotes erd
\end_inset

 ;
\end_layout

\begin_layout Plain Layout
close #3
\end_layout

\begin_layout Plain Layout
QUESTION: Do we get EOF if we run out of bytes to fill the buffer, or on
 the following read?
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Ql2Win
\end_layout

\begin_layout Standard
The changes to the source code for the bugs identified by Wolfgang are documente
d below.
\end_layout

\begin_layout Standard
To fix the buffer overflow problem identified by Wolfgang, add two extra
 equates near line 29, which currently reads as:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

err_bp      equ     -15
\end_layout

\begin_layout Plain Layout

err_eof     equ     -10
\end_layout

\begin_layout Plain Layout

me          equ     -1
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Change it to this instead:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

err_bp      equ     -15
\end_layout

\begin_layout Plain Layout

err_eof     equ     -10
\end_layout

\begin_layout Plain Layout

err_bffl    equ     -5
\end_layout

\begin_layout Plain Layout

err_ovfl    equ     -18
\end_layout

\begin_layout Plain Layout

me          equ     -1
\end_layout

\end_inset


\end_layout

\begin_layout Standard
We have added, in SMSQ/E nomenclature, 
\family typewriter
err_bffl
\family default
 and 
\family typewriter
err_ovfl
\family default
 as Wolfgang has noted that occasionally, the error returned in 
\family typewriter
err_ovfl
\family default
 instead of 
\family typewriter
err_bffl
\family default
.
 We will use these equates shortly, but first, let's fix the buffer size
 problem.
 Around line 83, you'll find this code:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

ql2win
\end_layout

\begin_layout Plain Layout

    moveq   #timeout,d3       ; Timeout
\end_layout

\begin_layout Plain Layout

    moveq   #buffSize,d4      ; Storage for buffer size for D2
\end_layout

\begin_layout Plain Layout

    lea     buffer,a3         ; Start of (write) buffer
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The problem, identified by Wolfgang, is the 
\family typewriter
moveq #buffsize,d4
\family default
 instruction.
 Any buffer over 127 bytes will be sign extended to a long word.
 This would make the lower word $FF80 in the case of 128 byte buffers, and
 as the buffer size is assumed to be positive, this makes for an assumed
 buffer size of 65,408 bytes rather than the actual 128.
 As soon as a line longer than 128 is read, bang!
\end_layout

\begin_layout Standard
The 
\family typewriter
moveq
\family default
 should be changed to a 
\family typewriter
move.w
\family default
 as in the following:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

ql2win
\end_layout

\begin_layout Plain Layout

    moveq   #timeout,d3       ; Timeout
\end_layout

\begin_layout Plain Layout

    move.w  #buffSize,d4      ; Storage for buffer size for D2
\end_layout

\begin_layout Plain Layout

    lea     buffer,a3         ; Start of (write) buffer
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Right then, back to the buffer overflow problems.
 The code starting at line 102 is where we need to test for the two new
 error codes.
 It currently looks like this:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

readLoop
\end_layout

\begin_layout Plain Layout

    moveq   #io_fline,d0      ; Fetch lines ending with LF
\end_layout

\begin_layout Plain Layout

    move.w  d4,d2             ; Buffer size
\end_layout

\begin_layout Plain Layout

    movea.l a4,a0             ; Channel to read
\end_layout

\begin_layout Plain Layout

    movea.l a3,a1             ; Read buffer start
\end_layout

\begin_layout Plain Layout

    trap    #3                ; Read a line from input file
\end_layout

\begin_layout Plain Layout

    tst.l   d0                ; OK?
\end_layout

\begin_layout Plain Layout

    beq.s   gotLine           ; Yes
\end_layout

\begin_layout Plain Layout

    cmpi.l  #ERR_EOF,d0       ; All done yet?
\end_layout

\begin_layout Plain Layout

    beq     allDone           ; Yes.
\end_layout

\begin_layout Plain Layout

    bra     errorExit         ; Oops!
\end_layout

\end_inset


\end_layout

\begin_layout Standard
We need to change it to this instead:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

readLoop
\end_layout

\begin_layout Plain Layout

    moveq   #io_fline,d0      ; Fetch lines ending with LF
\end_layout

\begin_layout Plain Layout

    move.w  d4,d2             ; Buffer size
\end_layout

\begin_layout Plain Layout

    movea.l a4,a0             ; Channel to read
\end_layout

\begin_layout Plain Layout

    movea.l a3,a1             ; Read buffer start
\end_layout

\begin_layout Plain Layout

    trap    #3                ; Read a line from input file
\end_layout

\begin_layout Plain Layout

    tst.l   d0                ; OK?
\end_layout

\begin_layout Plain Layout

    beq.s   gotLine           ; Yes
\end_layout

\begin_layout Plain Layout

    cmpi.l  #ERR_EOF,d0       ; All done yet?
\end_layout

\begin_layout Plain Layout

    bne.s   overflow          ; Not yet
\end_layout

\begin_layout Plain Layout

    tst.w   d1                ; Did we read anything?
\end_layout

\begin_layout Plain Layout

    bne.s   gotLine           ; Yes, deal with it
\end_layout

\begin_layout Plain Layout

    beq     allDone           ; All done now
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

overflow
\end_layout

\begin_layout Plain Layout

    cmpi.l  #ERR_BFFL,d0      ; Buffer overflow?
\end_layout

\begin_layout Plain Layout

    beq.s   gotLine           ; Yes, write it out unchanged
\end_layout

\begin_layout Plain Layout

    cmpi.l  #ERR_OVFL,d0      ; Buffer overflow (apparently!)
\end_layout

\begin_layout Plain Layout

    beq.s   gotLine           ; Yes, write it out unchanged   
\end_layout

\begin_layout Plain Layout

    bra     errorExit         ; Oops!
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The observant among us – which usually excluded myself – will notice that
 I test for any input even when we hit end of file.
 This helps deal with Wolfgang's over observation that we can lose the last
 line of the input file if it doesn't fill the buffer.
\end_layout

\begin_layout Standard
It will not have a CR/LF added though, if it doesn't have one when read.
 If it comes without a QL line terminator, it goes out without a Windows
 one as well.
 Seems fair to me?
\end_layout

\begin_layout Standard
With these changes, and a suitable test file, the code works as good as
 it did before.
 All lines, no matter how long, will be correctly written out and converted
 to Windows format line endings.
\end_layout

\begin_layout Standard
I've included a fixed version of the code in the code repository for this
 issue, so that you don't have to fix it yourself!
\end_layout

\begin_layout Subsection
Win2ql
\end_layout

\begin_layout Standard
As with ql2win, add two extra equates near line 29, which currently reads
 as:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

err_bp      equ     -15
\end_layout

\begin_layout Plain Layout

err_eof     equ     -10
\end_layout

\begin_layout Plain Layout

me          equ     -1
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Change it to this instead:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

err_bp      equ     -15
\end_layout

\begin_layout Plain Layout

err_eof     equ     -10
\end_layout

\begin_layout Plain Layout

err_bffl    equ     -5
\end_layout

\begin_layout Plain Layout

err_ovfl    equ     -18
\end_layout

\begin_layout Plain Layout

me          equ     -1
\end_layout

\end_inset


\end_layout

\begin_layout Standard
We have added 
\family typewriter
err_bffl
\family default
 and 
\family typewriter
err_ovfl
\family default
 as previously.
 The buffer size problem is next in the source, around line 83, you'll find
 this code:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

win2ql
\end_layout

\begin_layout Plain Layout

    moveq   #timeout,d3       ; Timeout
\end_layout

\begin_layout Plain Layout

    moveq   #buffSize,d4      ; Storage for buffer size for D2
\end_layout

\begin_layout Plain Layout

    lea     buffer,a3         ; Start of (write) buffer
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Once again, the 
\family typewriter
moveq
\family default
 should be changed to a 
\family typewriter
move.w
\family default
 as in the following:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

win2ql
\end_layout

\begin_layout Plain Layout

    moveq   #timeout,d3       ; Timeout
\end_layout

\begin_layout Plain Layout

    move.w  #buffSize,d4      ; Storage for buffer size for D2
\end_layout

\begin_layout Plain Layout

    lea     buffer,a3         ; Start of (write) buffer
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Back to the buffer overflow problems.
 The code currently starting at line 100 is where we need to test for the
 two new error codes.
 It currently looks like this:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

readLoop
\end_layout

\begin_layout Plain Layout

    moveq   #io_fline,d0      ; Fetch lines ending with LF
\end_layout

\begin_layout Plain Layout

    move.w  d4,d2             ; Buffer size
\end_layout

\begin_layout Plain Layout

    movea.l a4,a0             ; Channel to read
\end_layout

\begin_layout Plain Layout

    movea.l a3,a1             ; Read buffer start
\end_layout

\begin_layout Plain Layout

    trap    #3                ; Read a line from input file
\end_layout

\begin_layout Plain Layout

    tst.l   d0                ; OK?
\end_layout

\begin_layout Plain Layout

    beq.s   gotLine           ; Yes
\end_layout

\begin_layout Plain Layout

    cmpi.l  #ERR_EOF,d0       ; All done yet?
\end_layout

\begin_layout Plain Layout

    beq     allDone           ; Yes.
\end_layout

\begin_layout Plain Layout

    bra     errorExit         ; Oops!
\end_layout

\end_inset


\end_layout

\begin_layout Standard
We need to change it to this instead:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

readLoop
\end_layout

\begin_layout Plain Layout

    moveq   #io_fline,d0      ; Fetch lines ending with LF
\end_layout

\begin_layout Plain Layout

    move.w  d4,d2             ; Buffer size
\end_layout

\begin_layout Plain Layout

    movea.l a4,a0             ; Channel to read
\end_layout

\begin_layout Plain Layout

    movea.l a3,a1             ; Read buffer start
\end_layout

\begin_layout Plain Layout

    trap    #3                ; Read a line from input file
\end_layout

\begin_layout Plain Layout

    tst.l   d0                ; OK?
\end_layout

\begin_layout Plain Layout

    beq.s   gotLine           ; Yes
\end_layout

\begin_layout Plain Layout

    cmpi.l  #ERR_EOF,d0       ; All done yet?
\end_layout

\begin_layout Plain Layout

    bne.s   overflow          ; Not yet
\end_layout

\begin_layout Plain Layout

    tst.w   d1                ; Did we read anything?
\end_layout

\begin_layout Plain Layout

    bne.s   gotLine           ; Yes, deal with it
\end_layout

\begin_layout Plain Layout

    beq     allDone           ; All done now
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

overflow
\end_layout

\begin_layout Plain Layout

    cmpi.l  #ERR_BFFL,d0      ; Buffer overflow?
\end_layout

\begin_layout Plain Layout

    beq.s   gotLine           ; Yes, write it out unchanged
\end_layout

\begin_layout Plain Layout

    cmpi.l  #ERR_OVFL,d0      ; Buffer overflow (apparently!)
\end_layout

\begin_layout Plain Layout

    beq.s   gotLine           ; Yes, write it out unchanged   
\end_layout

\begin_layout Plain Layout

    bra     errorExit         ; Oops!
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This is pretty much the same changes as for ql2win.
 I test for any input even when we hit end of file, as before, so that when
 the last line of a file doesn't fill the buffer it will still be written
 out.
\end_layout

\begin_layout Standard
As with ql2win, it will not have a QL line ending LF added if there wasn't
 one presnt when the line was read.
 If it comes without a Windows line terminator, it goes out without a QL
 one as well.
 Seems fair to me?
\end_layout

\end_body
\end_document
